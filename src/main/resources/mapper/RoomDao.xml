<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.back_students_choose_lodge.dao.RoomDao">

    <resultMap type="com.back_students_choose_lodge.entity.Room" id="RoomMap">
        <result property="roomId" column="room_id" jdbcType="INTEGER"/>
        <result property="buildingId" column="building_id" jdbcType="INTEGER"/>
        <result property="roomName" column="room_name" jdbcType="VARCHAR"/>
        <result property="professional" column="professional" jdbcType="VARCHAR"/>
    </resultMap>


    <!--新增所有列-->
    <insert id="insertRooms" keyProperty="roomId" useGeneratedKeys="true">
        insert into students_choose_lodge_database.room(building_id, room_name)
        values
        <foreach collection="entities" item="entity" separator=",">
            (#{entity.buildingId}, #{entity.roomName})
        </foreach>
    </insert>

    <!--通过实体作为筛选条件查询-->
    <select id="queryAll" resultMap="RoomMap">
        select
        room_id, building_id, room_name, professional
        from students_choose_lodge_database.room
        <where>
            <if test="roomId != null">
                and room_id = #{roomId}
            </if>
            <if test="buildingId != null">
                and building_id = #{buildingId}
            </if>
            <if test="roomName != null and roomName != ''">
                and room_name = #{roomName}
            </if>
            <if test="professional != null and professional != ''">
                and professional = #{professional}
            </if>
        </where>
    </select>

<!--    分界线～～～～～～～～～～～～～～～～～～～～～·-->

    <!--新增所有列-->
    <insert id="insertBatch" keyProperty="roomId" useGeneratedKeys="true">
        insert into students_choose_lodge_database.room(building_id, room_name, professional)
        values
        <foreach collection="entities" item="entity" separator=",">
            (#{entity.buildingId}, #{entity.roomName}, #{entity.professional})
        </foreach>
    </insert>

    <!--查询单个-->
    <select id="queryById" resultMap="RoomMap">
        select room_id,
               building_id,
               room_name,
               professional
        from students_choose_lodge_database.room
        where room_id = #{roomId}
    </select>

    <!--查询指定行数据-->
    <select id="queryAllByLimit" resultMap="RoomMap">
        select room_id,
               building_id,
               room_name,
               professional
        from students_choose_lodge_database.room limit #{offset}, #{limit}
    </select>


    <!--新增所有列-->
    <insert id="insert" keyProperty="roomId" useGeneratedKeys="true">
        insert into students_choose_lodge_database.room(building_id, room_name, professional)
        values (#{buildingId}, #{roomName}, #{professional})
    </insert>



    <insert id="insertOrUpdateBatch" keyProperty="roomId" useGeneratedKeys="true">
        insert into students_choose_lodge_database.room(building_id, room_name, professional)
        values
        <foreach collection="entities" item="entity" separator=",">
            (#{entity.buildingId}, #{entity.roomName}, #{entity.professional})
        </foreach>
        on duplicate key update
        building_id = values(building_id) , room_name = values(room_name) , professional = values(professional)
    </insert>

    <!--通过主键修改数据-->
    <update id="update">
        update students_choose_lodge_database.room
        <set>
            <if test="buildingId != null">
                building_id = #{buildingId},
            </if>
            <if test="roomName != null and roomName != ''">
                room_name = #{roomName},
            </if>
            <if test="professional != null and professional != ''">
                professional = #{professional},
            </if>
        </set>
        where room_id = #{roomId}
    </update>

    <!--通过主键删除-->
    <delete id="deleteById">
        delete
        from students_choose_lodge_database.room
        where room_id = #{roomId}
    </delete>

</mapper>

